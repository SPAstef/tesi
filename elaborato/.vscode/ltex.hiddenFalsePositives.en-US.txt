{"rule":"ENGLISH_WORD_REPEAT_RULE","sentence":"^\\QBoolean circuits with XOR and AND gates behave like elements of the boolean field \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"MISSING_GENITIVE","sentence":"^\\QLagrange interpolation is the function: \\E(?:Dummy|Ina|Jimmy-)[0-9]+$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qenglish\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Qbasicstyle=,breaklines=true,frame=single\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\Qbasicstyle=,breaklines=true,frame=single\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QArtificial Intelligence and Cybersecurity Cryptographic Primitives for Zero-Knowledge: Theory and Implementation Stefano Trevisani Dr. Arnab Roy Prof. Alberto Policriti Prof. Elisabeth Oswald Msc.\\E$"}
{"rule":"THE_NN_AND_THE_NN","sentence":"^\\QThe main idea behind ZKP is to have two (or, in some cases, more) parties, where one is the prover and the other is the verifier: in a classical proof system, the prover must be able to convince the verifier that a certain statement is true, when this is indeed the case, but the verifier cannot be fooled if the statement is actually false.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QWe could also want to relax the soundness requirement so that it is guaranteed only against computationally bounded provers: in this case, instead of `proof' we use the term ARgument of Knowledge, and hence we can have ZK-IARK/ZK-NARK systems.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QWe could also want to relax the soundness requirement so that it is guaranteed only against computationally bounded provers: in this case, instead of `proof' we use the term ARgument of Knowledge.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QUsing the libsnark library (an implementation of the Groth16 framework), we implemented our hash function, along with other competitor hash functions and a hash-agnostic, variable-arity Merkle Tree circuit template, in a C++ project which we then used to compare their real-world performance for same-level security guarantees in various scenarios.\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QBy distilling the core ideas in this field and introducing new ones, we then formalized them in the so-called Generalized Triangular Dynamical System framework, which we used to extract a new family of cryptographic functions: .\\E$"}
{"rule":"MISSING_GENITIVE","sentence":"^\\QMerkle tree of \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QThe compactness of an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q-to-\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q-bit hash function making \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q queries to an underlying \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q-to-\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q-bit one-way compression function is the value \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QAn Augmented Binary tRee (ABR) of height \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q over a \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q-to\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q compression function \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is a complete binary tree of height \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q augmented with middle nodes such that, given a sequence of input messages \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, it produces an output digest \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q in the following way: The leaf nodes \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q contain \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QTwo of the most important complexity classes are PTIME ( for short) and NPTIME ( for short), which are the classes of languages decidable respectively by a deterministic TM and a nondeterministic TM using at most polynomial time.\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QWhile we do not know if \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, it is widely believed that \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q: for a deterministic Turing machine, deciding problems (i.e. the hardest problems in ) will generally take an exponential amount of time, and there is no known way in the physical world to build non-deterministic Turing machines.\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qlibsnark.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QAfter choosing the group, we set up the protoboard which, as the name suggests, it is the object where one places the components of the circuit: The template argument Field specifies the underlying field, and PUBLICN specifies the number of output (i.e. public) variables in the circuit.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QHowever, it is usually much more convenient to only declare the input and output variables, and delegate the wiring to gadgets which act as composable black-boxes: Note that the first PUBLICN variables allocated will be considered public, while the remaining ones will be private.\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\Q.: Cryptographic Primitives from Generalized Triangular Dynamical Systems.\\E$"}
{"rule":"ENGLISH_WORD_REPEAT_RULE","sentence":"^\\QSimilarly, bitwise AND and non-native addition also require multiplications to be simulated.\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\Q.\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QThe idea of , reprising an older proposal \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, is to use a very simple polynomial permutation as its core component, and by repeating it for an adequate number of rounds, obtain a secure construction.\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QBy applying the Feistel construction on the permutation, one obtains Feistel , or -\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qvs. SHA.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QPerforming computations over large prime fields is extremely expensive, as addition and multiplication cannot be performed by a single CPU instruction, but must be emulated (multiplication in particular is extremely costly, even with clever implementations like the Montgomery form \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q): for example, on an x86 architecture, a standard software implementation of SHA-256 is more than \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q times faster than over the BN254 curve (implemented using libff, the underlying arithmetic library of libsnark) to compress a 512 bit input to a 256 bit output.\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QHowever, when translated into an arithmetic circuit, SHA-256 requires about \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q multiplications, while requires only \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, making it about \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q times (furthermore, designing and optimizing the SHA-256 circuit is much harder than for ).\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QAfter the design of , a natural question that followed was whether it was possible to increase the complexity of the round function and reduce the number of rounds without compromising on security.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QThe design has the same three main steps of the classic SPN, where the message and the key are interpreted as vectors in \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q for some prime field \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q and some arbitrary \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q: AddKey: add the key to the message.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QSubWords: apply a substitution function \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q to the elements of the message (non-linear layer).\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QMixLayer: apply a permutation function \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q to the message (linear layer).\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QAdditionally, in the design of , new kind of algebraic attacks were considered \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, the most important of which is certainly the Gröbner basis attack (a generalization of the concept of gaussian elimination \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q).\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QAdditionally, in the design of , new kind of algebraic attacks were considered \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, the most important of which is certainly the Gröbner basis attack (a generalization of the concept of Gaussian elimination \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q).\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QFor reference, the -\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q compression function requires \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q multiplications, compared to the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q required by .\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QMany new designs were proposed in the last few years, such as Ciminion \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, which exploits Toffoli gates \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q to improve the construction, and \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, which uses inverse exponentiations (i.e. \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q) in the substitution layer.\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QA quirk of is the matrix used in the linear layer (which is basically the same of ): it is a \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q MDS circulant matrix, where \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is the number of branches, but is well-defined only when \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q or \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QAs we already observed when discussing , usually \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, which means that the degree of the permutation grows much faster.\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QSimilarly to , the permutation can be very easily extended to a compression function due to the embedded sponge mechanism.\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QFrom a performance point of view, is extremely competitive: for reference, the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q-to-\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q instantiation only needs \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q R1CS constraints, compared to the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q required by .\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\Q.: A new ZK-friendly permutation.\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QAs it is often the case in research, the separation line is a bit blurry, as , which we said to be a Gen-II design, already used inverse exponentiations\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QOther from , there is another very recent Gen-III construction, called \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q and based on the design, which has some common points with the construction.\\E$"}
{"rule":"ENGLISH_WORD_REPEAT_BEGINNING_RULE","sentence":"^\\QGiven a vector space \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q and two functions \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q and \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q are CCZ-equivalent if there is an affine permutation \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q such that \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QFor this reason, we introduce the Generalized Triangular Dynamical System \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, GTDS for short, an algebraic framework which generalizes many previous designs (such as Feistel, SPN, and ) and enables us to provide a systematic security analysis of the constructions derived from it.\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\Qand .\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qand .\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qcircmul \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q Efficient evaluation of the matrix-vector product with \\E(?:Dummy|Ina|Jimmy-)[0-9]+$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QIn \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q you can find the parameters for and its aggressive variant , the parameters for the respective hash functions are respectively the same.\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QFor a detailed security analysis of , and their aggressive variants, refer to \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QPerformance evaluation of .\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\Q\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q shows the number of constraints required for specific instantiations of , , , and over \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q-bit prime fields for a target \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q bits of security.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QIn order to experiment with the cryptographic primitives and the constructions discussed throughout this thesis, we wrote the C++ zkp-hash library, by building on libsnark.\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QTemplates for native and ZK-SNARK implementations of , and .\\E$"}
{"rule":"HAVE_PART_AGREEMENT","sentence":"^\\QIn our construction, each node is labeled with a left-to-right bottom-to-top \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q-based index \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q: the leftmost leaf will have index \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q and the root will have index \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, where \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is the height of the tree.\\E$"}
{"rule":"SENT_START_CONJUNCTIVE_LINKING_ADVERB_COMMA","sentence":"^\\QFurther extending the scheme to allow for single nodes to contain multiple field elements is quite straightforward.\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qvs. .\\E$"}
{"rule":"DOUBLE_PUNCTUATION","sentence":"^\\Qvs. .\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QUsing our library, we compared with and .\\E$"}
{"rule":"PLUS_MINUS","sentence":"^\\QAll experiments were run on a system with an Intel Core i7–11800H CPU and 32 GB of RAM on a Clear Linux instance, using the g++-12 compiler with -O3 -march=native flags.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QAn Augmented Binary tRee (ABR) of height \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q over a \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q-to-\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q compression function \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q is a complete binary tree of height \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q augmented with middle nodes such that, given a sequence of input messages \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, it produces an output digest \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q in the following way: The leaf nodes \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q contain \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"WHITESPACE_RULE","sentence":"^\\Q[ ]  ( )  [ )  ( ]\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\Q[ ]  ( )  [ )  ( ]\\E$"}
{"rule":"EN_UNPAIRED_BRACKETS","sentence":"^\\Q[ ]  ( )  [ )  ( ]\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q[named=UBCblue]structure navigation symbols footline[frame number]\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QInteractive Proof Systems \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q max height=96pt,keepaspectratio Prover: wants to prove a statement by creating a proof.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QThe Blockchain max height=128pt,keepaspectratio Groups of transactions are leaves of a Merkle tree \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QA new mode of hash, the Augmented Binary tRee \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q[allowframebreaks]\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QTwo variants: and .\\E$"}
{"rule":"UNLIKELY_OPENING_PUNCTUATION","sentence":"^\\Q: \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QInverse power \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q: same constraint , fast degree growth.\\E$"}
{"rule":"DOUBLE_PUNCTUATION","sentence":"^\\QFor this reason, we introduce the Generalized Triangular Dynamical System \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, GTDS for short, an algebraic framework which generalizes many previous designs (such as Feistel, SPN, , …) and their instantiations (, , , …), and enables us to provide a systematic security analysis of the constructions derived from it.\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\QFor this reason, we introduce the Generalized Triangular Dynamical System \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, GTDS for short, an algebraic framework which generalizes many previous designs (such as Feistel, SPN, , …) and their instantiations (, , , …), and enables us to provide a systematic security analysis of the constructions derived from it.\\E$"}
{"rule":"UNLIKELY_OPENING_PUNCTUATION","sentence":"^\\Q: a new primitive from the GTDS \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q \\E(?:Dummy|Ina|Jimmy-)[0-9]+$"}
{"rule":"UNLIKELY_OPENING_PUNCTUATION","sentence":"^\\Q: A new design that builds on our GTDS framework.\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qand the GTDS \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q \\E(?:Dummy|Ina|Jimmy-)[0-9]+$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qand \\E(?:Dummy|Ina|Jimmy-)[0-9]+$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qand \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q Based on the GTDS design strategy.\\E$"}
{"rule":"UNLIKELY_OPENING_PUNCTUATION","sentence":"^\\Q: OWCF based on in sponge mode.\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qand \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q The keyed permutation: Based on the GTDS design strategy.\\E$"}
{"rule":"UNLIKELY_OPENING_PUNCTUATION","sentence":"^\\Q: \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q constraints, same guarantees as competitors.\\E$"}
{"rule":"EN_COMPOUNDS","sentence":"^\\Qxor [from=circle] [from=circle] [from=circle]north [from=circle]north west [from=circle]north east [from=circle]center [from=circle]west [from=circle]east [from=circle]mid [from=circle]mid west [from=circle]mid east [from=circle]base [from=circle]base west [from=circle]base east [from=circle]south [from=circle]south west [from=circle]south east [from=circle] === /pgf/outer xsep /pgf/outer ysep< by- by-     -   -\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Qxor [from=circle] [from=circle] [from=circle]north [from=circle]north west [from=circle]north east [from=circle]center [from=circle]west [from=circle]east [from=circle]mid [from=circle]mid west [from=circle]mid east [from=circle]base [from=circle]base west [from=circle]base east [from=circle]south [from=circle]south west [from=circle]south east [from=circle] === /pgf/outer xsep /pgf/outer ysep< by- by-     -   -\\E$"}
{"rule":"WHITESPACE_RULE","sentence":"^\\Qxor [from=circle] [from=circle] [from=circle]north [from=circle]north west [from=circle]north east [from=circle]center [from=circle]west [from=circle]east [from=circle]mid [from=circle]mid west [from=circle]mid east [from=circle]base [from=circle]base west [from=circle]base east [from=circle]south [from=circle]south west [from=circle]south east [from=circle] === /pgf/outer xsep /pgf/outer ysep< by- by-     -   -\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qpgfsys.code.tex\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Qpgfkeys.code.tex\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Qpgfsys.code.tex\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q/pgf/.is family /pgf\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q#1 pgf@sys@fail@#1 pgf@sys@fail@#1=Your graphic driver does not support #1.\\E$"}
{"rule":"WHITESPACE_RULE","sentence":"^\\Q#1#2#3#4#5#6#7#8#9#1#2#3#4 by- by-#5#6#7#8 by- by- pt#9 pt by.5 by.5 by.5 by.5 0 0   1 0 0 1 - -\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Qpgf@sys@att@beg@ pgf@sys@att@end@\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q#1 pgf@sys@reg@type@#1 by1 pgf@sys@reg@type@#1y b p t pgf@sys@reg@type@background 0\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q#1#2#1 pgf@sys@reg@type@#2\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Qpgf@sys@id@keylist@\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q#1#2#3#4#2 pgf@sys@att@beg@#1 #2 pgf@sys@att@end@#1 #2#3#4\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q#1#2#3#4#1#4#2 pgf@sys@id@keylist@#1 #2#4#3\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q#1#2#2 pgf@sys@id@keylist@#2#1\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q#1 @pgfshading#1!=\\E$"}
{"rule":"CD_NN","sentence":"^\\Qstay 0 jump 1\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q#1#2#2#1 pgf@sys@marker@prot@#1 by1\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Q#1 pgf@sys@marker@prot@#1\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\Qrdf\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\Qwidth=,height=,page=,\\E$"}
{"rule":"WHITESPACE_RULE","sentence":"^\\Q-1Driver file for pgf:   Driver file “” not found.\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\Qand \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q , a new keyed permutation from the GTDS: Exponent \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q: easy to exponentiate by, inverse is big.\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\Q, a new keyed permutation from the GTDS: Exponent \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q: easy to exponentiate by, inverse is big.\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\Q[allowframebreaks,noframenumbering]\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QInteractive Proof Systems \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q max height=96pt,keepaspectratio\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QBottom-up computation using an hash function.\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qand\\E$"}
{"rule":"UNLIKELY_OPENING_PUNCTUATION","sentence":"^\\Q: Partial substitution-permutation network (from AES \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q).\\E$"}
{"rule":"UNLIKELY_OPENING_PUNCTUATION","sentence":"^\\Q: based on the scheme: \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"DOUBLE_PUNCTUATION","sentence":"^\\QEncompasses existing design strategies (Feistel, , SPN…).\\E$"}
{"rule":"UNLIKELY_OPENING_PUNCTUATION","sentence":"^\\Q: aggressive variant,\\E$"}
{"rule":"DOUBLE_PUNCTUATION","sentence":"^\\QEncompasses existing strategies (Feistel, , SPN…).\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\Q-256: 96 R1CS constraints (\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q less than ).\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QA self-configuring Merkle tree, and the Augmented Binary tRee \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\Q\\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q less constraints than .\\E$"}
